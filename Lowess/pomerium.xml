<?xml version="1.0"?>
<Container version="2">
	<Name>Pomerium</Name>
	<Repository>pomerium/pomerium</Repository>
	<Registry>https://hub.docker.com/r/pomerium/pomerium/</Registry>
	<Network>bridge</Network>
	<Privileged>false</Privileged>
	<Support>/dev/null/</Support>
	<Overview>
		Pomerium - Secure, identity-aware access from anywhere.
	</Overview>
	<Category>Network:Proxy</Category>
	<WebUI>http://[IP]:[PORT:80]</WebUI>
	<TemplateURL>
		https://raw.githubusercontent.com/Lowess/docker-templates-unraid/main/Lowess/prometheus.xml</TemplateURL>
	<Icon>
		https://raw.githubusercontent.com/Lowess/docker-templates-unraid/main/Lowess/images/pomerium.png</Icon>
	<ExtraParams />
	<Description>
		Secure, identity-aware access from anywhere. Access internal resources securely. Implement
		zero trust. Achieve compliance. All without the headache of a VPN.
	</Description>
	<Beta>True</Beta>
	<Project>https://www.pomerium.com/</Project>
	<Date>2022-03-16</Date>
	<Changes>
		###v0.0.1 (2022-03-18)
		- Initial release.
	</Changes>
	<Networking>
		<Mode>bridge</Mode>
		<Publish>
			<Port>
				<HostPort>8801</HostPort>
				<ContainerPort>80</ContainerPort>
				<Protocol>tcp</Protocol>
			</Port>
		</Publish>
	</Networking>
	<!-- Port Mappings -->
	<Config Type="Port" Name="Web UI Port" Target="80" Default="8801" Mode="tcp"
		Description="Port of Pomerium" Display="always" Required="true" Mask="false" />

	<!-- Pomerium Environment -->
	<Config Type="Variable" Name="Debug" Target="POMERIUM_DEBUG"
		Default="false"
		Description="Debug enables colored, human-readable logs to be streamed to standard out (opens new window). In production, it is recommended to be set to false."
		Mask="false"
		Display="advanced"
		Required="false">false</Config>

	<!-- Server related -->
	<Config Type="Variable" Name="Address" Target="ADDRESS"
		Default=":80"
		Description="Address specifies the host and port to serve HTTP requests from."
		Mask="false"
		Display="advanced"
		Required="false">:80</Config>

	<Config Type="Variable" Name="Insecure" Target="INSECURE_SERVER"
		Default="true"
		Description="Turning on insecure server mode will result in pomerium starting, and operating without any protocol encryption in transit.
	This setting can be useful in a situation where you have Pomerium behind a TLS terminating ingress or proxy. However, even in that case, it is highly recommended to use TLS to protect the confidentiality and integrity of service communication even behind the ingress using self-signed certificates or an internal CA. Please see our helm-chart for an example of just that."
		Mask="false"
		Display="advanced"
		Required="false">true</Config>

	<Config Type="Variable" Name="Forward Auth URL" Target="FORWARD_AUTH_URL"
		Default="http://fwdauth.domain.duckdns.org"
		Description="Forward authentication creates an endpoint that can be used with third-party proxies that do not have rich access control capabilities. Forward authentication allows you to delegate authentication and authorization for each request to Pomerium."
		Mask="false"
		Display="advanced"
		Required="false">http://fwdauth.[domain].duckdns.org</Config>

	<Config Type="Variable" Name="Authenticate Service URL" Target="AUTHENTICATE_SERVICE_URL"
		Default="https://authenticate.domain.duckdns.org"
		Description="Authenticate Service URL is the externally accessible URL for the authenticate service."
		Mask="false"
		Display="advanced"
		Required="false">https://authenticate.[domain].duckdns.org</Config>

	<Config Type="Variable" Name="Cookie Secret" Target="COOKIE_SECRET"
		Default="OWTV2fONR7expoexvhzYBnkdVtrwTh0XhJsQqFMzJuk="
		Description="Secret used to encrypt and sign session cookies. You can generate a random key with head -c32 /dev/urandom | base64."
		Mask="false"
		Display="advanced"
		Required="false">OWTV2fONR7expoexvhzYBnkdVtrwTh0XhJsQqFMzJuk=</Config>

	<Config Type="Variable" Name="Shared Secret" Target="SHARED_SECRET"
		Default="wB/J+7Fgc+XdCufhjnn/LVZhxjGmgsTaBr7VcjMBHTA="
		Description="Shared Secret is the base64 encoded 256-bit key used to mutually authenticate requests between services. It's critical that secret keys are random, and stored safely. Use a key management system or /dev/urandom to generate a key. Example head -c32 /dev/urandom | base64"
		Mask="false"
		Display="advanced"
		Required="false">wB/J+7Fgc+XdCufhjnn/LVZhxjGmgsTaBr7VcjMBHTA=</Config>

	<!-- IDP related parameters -->
	<Config Type="Variable" Name="IDP Provider" Target="IDP_PROVIDER"
		Default="google"
		Description="Provider is the short-hand name of a built-in OpenID Connect (oidc) identity provider to be used for authentication. To use a generic provider,set to oidc."
		Mask="false"
		Display="advanced"
		Required="false">google</Config>

	<Config Type="Variable" Name="Google Client Id" Target="IDP_CLIENT_ID"
		Default=""
		Description="Client ID is the OAuth 2.0 Client Identifier retrieved from your identity provider. See your identity provider's documentation, and our identity provider docs for details."
		Mask="false"
		Display="advanced"
		Required="false"></Config>

	<Config Type="Variable" Name="Google Client Secret" Target="IDP_CLIENT_SECRET"
		Default=""
		Description="Client Secret is the OAuth 2.0 Secret Identifier retrieved from your identity provider. See your identity provider's documentation, and our identity provider docs for details.	"
		Mask="false"
		Display="advanced"
		Required="false"></Config>

	<!-- Volume Mappings -->
	<Config Type="Path" Name="Pomerium config" Target="/pomerium/config.yaml"
		Default="/mnt/user/appdata/Pomerium/config.yaml"
		Mode="ro"
		Description="Pomerium config.yaml file. Mostly defines routes and authorizations but also anything else not available through this template"
		Display="always"
		Required="true"
		Mask="false"
	/>
</Container>